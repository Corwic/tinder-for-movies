{"version":3,"sources":["common/MoviesContext.tsx","common/useSwipe.tsx","common/useMovies.tsx","common/sendResult.tsx","components/MovieSelection.tsx","components/MovieWrapper.tsx","App.tsx","index.tsx","mocks/handlers.js","mocks/browser.js"],"names":["MoviesContext","createContext","movies","isLoading","error","useSwipe","data","rightAction","f","leftAction","useState","touchStart","setTouchStart","touchEnd","setTouchEnd","e","targetTouches","clientX","useMovies","setIsLoading","setMovies","setError","useEffect","a","process","fetch","response","status","Error","statusText","json","sendResult","movieID","result","body","accepted","putOptions","method","JSON","stringify","headers","MovieSelection","movie","accept","reject","id","handleTouchStart","handleTouchMove","handleTouchEnd","className","onTouchStart","onTouchMove","onTouchEnd","title","rating","src","imageURL","alt","type","onClick","MovieWrapper","useContext","num","setNum","increase","length","toString","App","Provider","value","ReactDOM","render","StrictMode","document","getElementById","selectedMovie","req","recommendations","find","params","handlers","rest","get","res","ctx","put","worker","setupWorker"],"mappings":"yMAeeA,G,MANOC,wBAAyB,CAC7CC,OAAQ,GACRC,WAAW,EACXC,MAAO,M,OCkBMC,EAtBE,SAAC,GAAuF,IAAD,IAApFC,YAAoF,MAA7E,GAA6E,MAAzEC,mBAAyE,MAA3D,SAACC,GAAD,OAAOA,GAAoD,MAAjDC,kBAAiD,MAApC,SAACD,GAAD,OAAOA,GAA6B,EACtG,EAAoCE,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAiBA,MAAO,CAfP,SAA0BC,GACxBH,EAAcG,EAAEC,cAAc,GAAGC,UAEnC,SAAyBF,GACvBD,EAAYC,EAAEC,cAAc,GAAGC,UAEjC,WACMN,EAAaE,EAAW,KAC1BJ,EAAWH,GAETK,EAAaE,GAAY,KAC3BN,EAAYD,MCMHY,EA1BG,WAChB,MAAkCR,oBAAkB,GAApD,mBAAOP,EAAP,KAAkBgB,EAAlB,KACA,EAA4BT,mBAAkB,IAA9C,mBAAOR,EAAP,KAAekB,EAAf,KACA,EAA0BV,mBAAc,IAAxC,mBAAON,EAAP,KAAciB,EAAd,KAoBA,OAlBAC,qBAAU,YACP,+BAAAC,EAAA,oCAAAA,EAAA,4DACaC,8CADb,kBAG0BC,MAAM,GAAD,OAFlBD,8CAEkB,sBAH/B,UAI2B,OADlBE,EAHT,QAIgBC,OAJhB,sBAMW,IAAIC,MAAMF,EAASG,YAN9B,uBAQ+BH,EAASI,OARxC,OAQSxB,EART,OASGc,EAAUd,GATb,kDAWGe,EAAS,EAAD,IAXX,QAaCF,GAAa,GAbd,mHAeA,IAEI,CAAEjB,SAAQC,YAAWC,UC1BxB2B,EAAU,uCAAG,WAAOC,EAAiBC,GAAxB,iBAAAV,EAAA,4DACLC,8CACNU,EAAO,CAAEC,SAAqB,WAAXF,EAAsB,OAAS,SAClDG,EAAa,CACjBC,OAAQ,MACRH,KAAMI,KAAKC,UAAUL,GACrBM,QAAS,CACP,eAAgB,qBAPH,SAWOf,MAAM,GAAD,OAVjBD,8CAUiB,4BAA2BQ,EAA3B,YAAsCC,GAAUG,GAX5D,2CAAH,wDAgBDL,I,OCyCAU,EA/CQ,YAAqD,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,OAChD,EAA4DvC,EAAS,CACnEE,YAAaqC,EAEbtC,KAAMoC,EAAMG,KAHd,mBAAOC,EAAP,KAAyBC,EAAzB,KAA0CC,EAA1C,KAMA,OACE,sBACEC,UAAU,cACVC,aAAcJ,EACdK,YAAaJ,EACbK,WAAYJ,EAJd,UAME,sBAAKC,UAAU,aAAf,UACE,+BAAQP,EAAMW,QADhB,YAESX,EAAMY,OAFf,WAIA,qBACEL,UAAU,YACVM,IAAKb,EAAMc,SACXC,IAAG,UAAKf,EAAMW,MAAX,aAEL,sBAAKJ,UAAU,UAAf,UACE,yBACES,KAAK,SACLT,UAAU,SACVU,QAAShB,EAHX,UAKE,4CACC,IANH,YASA,yBACEe,KAAK,SACLT,UAAU,SACVU,QAASf,EAHX,UAKG,IALH,SAOG,IACD,kDCSKgB,EAxDM,WACnB,MAAqCC,qBAAW7D,GAAxCE,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,MAC3B,EAAsBM,mBAAS,GAA/B,mBAAOoD,EAAP,KAAYC,EAAZ,KACMC,EAAW,kBAAYD,EAAOD,EAAM,IAY1C,OAAI3D,EAEA,qBAAK8C,UAAU,wBAAf,SACE,iDAKD9C,GAA+B,IAAlBD,EAAO+D,QAAgB7D,EAErC,qBAAK6C,UAAU,wBAAf,SACE,+BAAO7C,EAAM8D,eAKd/D,GAA+B,IAAlBD,EAAO+D,QAAiB7D,EAQtCF,EAAO+D,QAAUH,EAEjB,qBAAKb,UAAU,wBAAf,SACE,iEAMJ,cAAC,EAAD,CACEP,MAAOxC,EAAO4D,GACdnB,OA7CW,WAEbZ,EAAW7B,EAAO4D,GAAKjB,GAAI,UAC3BmB,KA2CEpB,OAzCW,WACbb,EAAW7B,EAAO4D,GAAKjB,GAAI,UAC3BmB,OAqBE,qBAAKf,UAAU,wBAAf,SACE,uDCjCP,+BAAA1B,EAAA,4BAAAA,EAAA,uKAYD,IAae4C,EAbH,WACV,IAAM7D,EAAOY,IAEb,OACE,cAAC,EAAckD,SAAf,CAAwBC,MAAO/D,EAA/B,SACE,sBAAK2C,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,cAAC,EAAD,UCnBRqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kFCNpBC,EAAgB,SAACC,GAAD,OAAS1E,EAAO2E,gBAAgBC,MAAK,SAACpC,GAAD,OAAWA,EAAMG,KAAO+B,EAAIG,OAAOlC,OAc/EmC,EAZE,CACfC,IAAKC,IAAI,oBAAoB,SAACN,EAAKO,EAAKC,GAAX,OAAmBD,EAAIC,EAAIzD,OAAO,KAAMyD,EAAItD,KAAK5B,EAAO2E,qBACrFI,IAAKI,IAAI,+BAA+B,SAACT,EAAKO,EAAKC,GAAX,OAAmBD,EAAIC,EAAIzD,OAAO,KAAMyD,EAAItD,KAAJ,2BAC3E6C,EAAcC,IAD6D,IAE9EzC,UAAU,SAEZ8C,IAAKI,IAAI,+BAA+B,SAACT,EAAKO,EAAKC,GAAX,OAAmBD,EAAIC,EAAIzD,OAAO,KAAMyD,EAAItD,KAAJ,2BAC3E6C,EAAcC,IAD6D,IAE9EzC,UAAU,UCVRmD,EAASC,IAAW,WAAX,cAAeP,IAEfM,a","file":"static/js/main.6ae056af.chunk.js","sourcesContent":["import { createContext } from 'react'\nimport { Movie } from '../types/Movie'\n\ninterface Context {\n  movies: Movie[],\n  isLoading: boolean,\n  error: any\n}\n\nconst MoviesContext = createContext< Context >({\n  movies: [],\n  isLoading: true,\n  error: '',\n})\n\nexport default MoviesContext\n","import { TouchEvent, useState } from 'react'\n\ninterface SwipeProps {\n  data: string | number;\n  rightAction: (a: string | number) => void;\n  leftAction: (a: string | number) => void;\n}\n\nconst useSwipe = ({ data = '', rightAction = (f) => f, leftAction = (f) => f }: Partial<SwipeProps>) => {\n  const [touchStart, setTouchStart] = useState(0)\n  const [touchEnd, setTouchEnd] = useState(0)\n\n  function handleTouchStart(e: TouchEvent) {\n    setTouchStart(e.targetTouches[0].clientX)\n  }\n  function handleTouchMove(e: TouchEvent) {\n    setTouchEnd(e.targetTouches[0].clientX)\n  }\n  function handleTouchEnd() {\n    if (touchStart - touchEnd > 180) { // do your stuff here for left swipe\n      leftAction(data)\n    }\n    if (touchStart - touchEnd < -180) { // do your stuff here for right swipe\n      rightAction(data)\n    }\n  }\n\n  return [handleTouchStart, handleTouchMove, handleTouchEnd]\n}\n\nexport default useSwipe\n","import { useState, useEffect } from 'react'\nimport { Movie } from '../types/Movie'\n\nconst useMovies = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [movies, setMovies] = useState<Movie[]>([])\n  const [error, setError] = useState<any>('')\n\n  useEffect(() => {\n    (async function getMovies() {\n      const url = process.env.REACT_APP_SERVER_URL\n      try {\n        const response = await fetch(`${url}/recommendations/`)\n        if (response.status !== 200) {\n          // console.log('Error', response.status, response.statusText)\n          throw new Error(response.statusText)\n        }\n        const data: Movie[] = await response.json()\n        setMovies(data)\n      } catch (err: any) {\n        setError(err)\n      }\n      setIsLoading(false)\n    }())\n  }, [])\n\n  return { movies, isLoading, error }\n}\n\nexport default useMovies\n","const sendResult = async (movieID: string, result: 'accept' | 'reject') => {\n  const url = process.env.REACT_APP_SERVER_URL\n  const body = { accepted: result === 'accept' ? 'true' : 'false' }\n  const putOptions = {\n    method: 'PUT',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }\n\n  /* const res = */ await fetch(`${url}/recommendations/${movieID}/${result}`, putOptions)\n  // const updatedMovie = await res.json()\n  // console.log(`${movieID} is updated`, updatedMovie)\n}\n\nexport default sendResult\n","import React from 'react'\nimport { useSwipe } from '../common'\nimport { Movie } from '../types/Movie'\n\ninterface SelecionProps {\n  movie: Movie;\n  accept: () => void;\n  reject: () => void;\n}\n\nconst MovieSelection = function ({ movie, accept, reject }: SelecionProps) {\n  const [handleTouchStart, handleTouchMove, handleTouchEnd] = useSwipe({\n    rightAction: reject,\n    // leftAction: accept,\n    data: movie.id,\n  })\n\n  return (\n    <div\n      className=\"movie-frame\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <div className=\"movie-data\">\n        <span>{ movie.title }</span>\n        { ` (${movie.rating}/10)` }\n      </div>\n      <img\n        className=\"movie-img\"\n        src={movie.imageURL}\n        alt={`${movie.title} poster`}\n      />\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"accept\"\n          onClick={accept}\n        >\n          <span> ✓ </span>\n          {' '}\n          Accept\n        </button>\n        <button\n          type=\"button\"\n          className=\"reject\"\n          onClick={reject}\n        >\n          {' '}\n          Reject\n          {' '}\n          <span>×</span>\n        </button>\n      </div>\n    </div>\n  )\n}\nexport default MovieSelection\n","import React, { useState, useContext } from 'react'\nimport MovieSelection from './MovieSelection'\nimport { MoviesContext, sendResult } from '../common'\n\nconst MovieWrapper = function () {\n  const { movies, isLoading, error } = useContext(MoviesContext)\n  const [num, setNum] = useState(0)\n  const increase = (): void => setNum(num + 1)\n\n  const accept = (): void => {\n    // there's still a need in error handling of PUT reuest here.\n    sendResult(movies[num].id, 'accept')\n    increase()\n  }\n  const reject = (): void => {\n    sendResult(movies[num].id, 'reject')\n    increase()\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"movie-frame no-movies\">\n        <span>Loading...</span>\n      </div>\n    )\n  }\n\n  if (!isLoading && movies.length === 0 && error) {\n    return (\n      <div className=\"movie-frame no-movies\">\n        <span>{error.toString()}</span>\n      </div>\n    )\n  }\n\n  if (!isLoading && movies.length === 0 && !error) {\n    return (\n      <div className=\"movie-frame no-movies\">\n        <span>Nothing to show</span>\n      </div>\n    )\n  }\n\n  if (movies.length <= num) {\n    return (\n      <div className=\"movie-frame no-movies\">\n        <span>No more movies in your list</span>\n      </div>\n    )\n  }\n\n  return (\n    <MovieSelection\n      movie={movies[num]}\n      accept={accept}\n      reject={reject}\n    />\n  )\n}\n\nexport default MovieWrapper\n","import React from 'react'\nimport './App.css'\nimport { MoviesContext, useMovies } from './common'\nimport MovieWrapper from './components/MovieWrapper'\n\n(async function runWorkerIf() {\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line global-require\n    const { worker } = require('./mocks/browser')\n    await worker.start({\n      serviceWorker: {\n        url: '/tinder-for-movies/mockServiceWorker.js',\n      },\n    })\n  }\n}())\n\nconst App = function () {\n  const data = useMovies()\n\n  return (\n    <MoviesContext.Provider value={data}>\n      <div className=\"app\">\n        <h1 className=\"app-title\">Tinder for Movies</h1>\n        <MovieWrapper />\n      </div>\n    </MoviesContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { rest } from 'msw'\nimport movies from './db.json'\n\nconst selectedMovie = (req) => movies.recommendations.find((movie) => movie.id === req.params.id)\n\nconst handlers = [\n  rest.get('/recommendations', (req, res, ctx) => res(ctx.status(200), ctx.json(movies.recommendations))),\n  rest.put('/recommendations/:id/accept', (req, res, ctx) => res(ctx.status(200), ctx.json({\n    ...selectedMovie(req),\n    accepted: true,\n  }))),\n  rest.put('/recommendations/:id/reject', (req, res, ctx) => res(ctx.status(200), ctx.json({\n    ...selectedMovie(req),\n    accepted: false,\n  }))),\n]\n\nexport default handlers\n","import { setupWorker } from 'msw'\nimport handlers from './handlers'\n\nconst worker = setupWorker(...handlers)\n\nexport default worker\n"],"sourceRoot":""}