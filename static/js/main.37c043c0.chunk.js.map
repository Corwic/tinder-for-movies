{"version":3,"sources":["common/MoviesContext.tsx","common/sendResult.tsx","components/MovieSelection.tsx","common/useSwipe.tsx","components/MovieWrapper.tsx","App.tsx","common/useMovies.tsx","reportWebVitals.ts","index.tsx"],"names":["MoviesContext","createContext","sendResult","movie","result","a","process","body","accepted","putOptions","method","JSON","stringify","headers","fetch","id","console","log","MovieSelection","accept","reject","action","data","useState","touchStart","setTouchStart","touchEnd","setTouchEnd","e","targetTouches","clientX","useSwipe","handleTouchStart","handleTouchMove","handleTouchEnd","className","onTouchStart","onTouchMove","onTouchEnd","title","rating","src","imageURL","alt","onClick","MovieWrapper","movies","useContext","num","setNum","increase","length","App","setMovies","useEffect","response","status","json","useMovies","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c043c0.chunk.js","sourcesContent":["import { createContext } from 'react'\nimport { Movie } from '../types'\n\nexport const MoviesContext = createContext< Movie[] >( [] )","import { Movie } from '../types'\n\nexport const sendResult = async (movie: Movie, result: \"accept\" | \"reject\") => {\n    const url = process.env.REACT_APP_SERVER_URL\n    const body = { ...movie, accepted: result === 'accept' ? 'true' : 'false' }\n    const putOptions = {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    }\n\n    try {\n        await fetch(`${url}/recommendations/${movie.id}/${result}`, putOptions)\n    } catch (err) {\n        console.log('Problem with sending results', err);\n    }\n\n}","import { useSwipe } from '../common';\nimport { Movie } from '../types';\n\ninterface SelecionProps {\n    movie: Movie;\n    accept: () => void;\n    reject: () => void;\n}\n\nconst MovieSelection = ({movie, accept, reject}: SelecionProps) => {\n    const [handleTouchStart, handleTouchMove, handleTouchEnd] = useSwipe({action: reject, data: movie.id})\n\n    return (\n        <div \n            className = \"movie-frame\"\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            >\n            <div className = \"movie-data\">\n                <span>{ movie.title }</span>{ ` (${ movie.rating }/10)` }\n            </div>\n            <img className = \"movie-img\"\n                src = { movie.imageURL } alt = {`${ movie.title } poster`} />\n            <div className = \"buttons\">\n                <button \n                    className = \"accept\"\n                    onClick = {accept}\n                    ><span> ✓ </span> Accept \n                </button>\n                <button \n                    className = \"reject\"\n                    onClick = {reject}\n                    > Reject <span>×</span>\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default MovieSelection","import { TouchEvent, useState } from 'react';\n\ninterface SwipeProps {\n    data: string | number;\n    action: (a: string | number) => void; \n}\n\nexport const useSwipe = ({ action, data }: SwipeProps) =>{\n    const [touchStart, setTouchStart] = useState(0);\n    const [touchEnd, setTouchEnd] = useState(0);\n\n    function handleTouchStart(e: TouchEvent) {setTouchStart(e.targetTouches[0].clientX);}\n    function handleTouchMove(e: TouchEvent) {setTouchEnd(e.targetTouches[0].clientX);}\n    function handleTouchEnd() {\n        if (touchStart - touchEnd > 180) {}// do your stuff here for left swipe \n        if (touchStart - touchEnd < -180) { // do your stuff here for right swipe\n            action( data )\n        }\n    }\n\n    return [handleTouchStart, handleTouchMove, handleTouchEnd]\n}\n","import { useState, useContext } from 'react';\nimport MovieSelection from './MovieSelection';\nimport { MoviesContext, sendResult } from '../common'\n\nconst MovieWrapper = () => {\n    const movies = useContext( MoviesContext )\n    const [ num, setNum ] = useState( 0 )\n    const increase = (): void => setNum( num + 1 ) \n\n    const accept = (): void => {\n        // console.log(movies[num].title, 'is accepted');\n        sendResult(movies[num], 'accept')\n        increase()\n    }\n    const reject = (): void => {\n        // console.log(movies[num].title, 'is rejected');\n        sendResult(movies[num], 'reject')\n        increase()\n    }\n    \n    return movies.length === 0                  \n            // no movies in array\n            ?   <div className=\"movie-frame no-movies\">\n                    <span>Nothing to show</span>\n                </div>\n            : movies?.length > num              \n            // there are movies in array\n            ? <MovieSelection movie={ movies[num] } accept={ accept } reject={ reject }/>\n            // the list of movies is exhausted\n            :   <div className=\"movie-frame no-movies\"> \n                    <span>No more movies in your list</span>\n                </div>                          \n}\n\nexport default MovieWrapper","import './App.css';\nimport { MoviesContext } from './common';\nimport MovieWrapper from './components/MovieWrapper'\nimport { useMovies } from './common'\n\n\nfunction App() {\n  const { data } = useMovies()\n\n  return (\n    // @ts-ignore\n    <MoviesContext.Provider value={ data }>\n      <div className=\"app\">\n        <h1 className=\"appTitle\">Tinder for Movies</h1>\n        <MovieWrapper />\n      </div>\n    </MoviesContext.Provider>\n  )\n}\n\nexport default App;","import { useState, useEffect } from 'react';\nimport { Movie } from '../types';\n\nexport const useMovies = () => {\n    //const [isLoading, setIsLoading] = useState()\n    const [data, setMovies] = useState<Movie[]>([])\n\n    useEffect(() => {\n        (async function() {\n            const url = process.env.REACT_APP_SERVER_URL\n            //setIsLoading(true)\n            try {\n                const response = await fetch(`${url}/recommendations/`)\n                const status = await response.status\n                if (status !== 200) {\n                    console.log(status);\n                    return\n                }\n                const data = await response.json()\n                setMovies(data)\n                //setIsLoading(false)\n            } catch (err) {\n                console.log('GET request failed', err);\n            }\n        })();\n    }, [])\n\n    return { data }\n}","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}