{"version":3,"sources":["common/MoviesContext.tsx","common/sendResult.tsx","components/MovieSelection.tsx","common/useSwipe.tsx","components/MovieWrapper.tsx","App.tsx","common/useMovies.tsx","index.tsx","mocks/handlers.js","mocks/browser.js"],"names":["MoviesContext","createContext","movies","isLoading","error","sendResult","movieID","result","a","process","body","accepted","putOptions","method","JSON","stringify","headers","fetch","res","json","updatedMovie","console","log","MovieSelection","movie","accept","reject","data","rightAction","f","leftAction","useState","touchStart","setTouchStart","touchEnd","setTouchEnd","e","targetTouches","clientX","useSwipe","id","handleTouchStart","handleTouchMove","handleTouchEnd","className","onTouchStart","onTouchMove","onTouchEnd","title","rating","src","imageURL","alt","onClick","MovieWrapper","useContext","num","setNum","increase","length","toString","App","setIsLoading","setMovies","setError","useEffect","response","status","statusText","Error","useMovies","Provider","value","ReactDOM","render","StrictMode","document","getElementById","selectedMovie","req","recommendations","find","params","handlers","rest","get","ctx","put","worker","setupWorker"],"mappings":"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","file":"static/js/main.a50ad501.chunk.js","sourcesContent":["import { createContext } from 'react'\nimport { Movie } from '../types'\n\ninterface Context {\n  movies: Movie[],\n  isLoading: boolean,\n  error: any\n}\n\nexport const MoviesContext = createContext< Context >( {\n  movies: [],\n  isLoading: true,\n  error: ''\n} )","\nexport const sendResult = async (movieID: string, result: \"accept\" | \"reject\") => {\n    const url = process.env.REACT_APP_SERVER_URL\n    const body = { accepted: result === 'accept' ? 'true' : 'false' }\n    const putOptions = {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    }\n\n    const res = await fetch(`${url}/recommendations/${movieID}/${result}`, putOptions)\n    const updatedMovie = await res.json()\n    console.log(`${movieID} is updated`, updatedMovie)        \n\n}","import { useSwipe } from '../common'\nimport { Movie } from '../types'\n\ninterface SelecionProps {\n    movie: Movie;\n    accept: () => void;\n    reject: () => void;\n}\n\nconst MovieSelection = ({movie, accept, reject}: SelecionProps) => {\n    const [ handleTouchStart, handleTouchMove, handleTouchEnd ] = useSwipe({\n        rightAction: reject, \n        // leftAction: accept, \n        data: movie.id\n    })\n\n    return (\n        <div \n            className = \"movie-frame\"\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            >\n            <div className = \"movie-data\">\n                <span>{ movie.title }</span>{ ` (${ movie.rating }/10)` }\n            </div>\n            <img className = \"movie-img\"\n                src = { movie.imageURL } alt = {`${ movie.title } poster`} />\n            <div className = \"buttons\">\n                <button \n                    className = \"accept\"\n                    onClick = {accept}\n                    ><span> ✓ </span> Accept \n                </button>\n                <button \n                    className = \"reject\"\n                    onClick = {reject}\n                    > Reject <span>×</span>\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default MovieSelection","import { TouchEvent, useState } from 'react'\n\ninterface SwipeProps {\n    data: string | number;\n    rightAction: (a: string | number) => void; \n    leftAction: (a: string | number) => void;  \n}\n\nexport const useSwipe = ({ data = '', rightAction = f=>f, leftAction = f=>f }: Partial<SwipeProps>) =>{\n    const [ touchStart, setTouchStart ] = useState(0)\n    const [ touchEnd, setTouchEnd ] = useState(0)\n\n    function handleTouchStart(e: TouchEvent) {\n        setTouchStart(e.targetTouches[0].clientX)\n    }\n    function handleTouchMove(e: TouchEvent) {\n        setTouchEnd(e.targetTouches[0].clientX)\n    }\n    function handleTouchEnd() {\n        if (touchStart - touchEnd > 180) { // do your stuff here for left swipe \n            leftAction( data )\n        }\n        if (touchStart - touchEnd < -180) { // do your stuff here for right swipe\n            rightAction( data )\n        }\n    }\n\n    return [ handleTouchStart, handleTouchMove, handleTouchEnd ]\n}\n","import { useState, useContext } from 'react'\nimport MovieSelection from './MovieSelection'\nimport { MoviesContext, sendResult } from '../common'\n\nconst MovieWrapper = () => {\n    const { movies, isLoading, error } = useContext( MoviesContext )\n    const [ num, setNum ] = useState( 0 )\n    const increase = (): void => setNum( num + 1 ) \n\n    const accept = (): void => {\n        // there's still a need in error handling of PUT reuest here. \n        sendResult(movies[num].id, 'accept')\n        increase()\n    }\n    const reject = (): void => {\n        sendResult(movies[num].id, 'reject')\n        increase()\n    }\n    \n    if (isLoading) {\n        return (\n            <div className=\"movie-frame no-movies\">\n                <span>Loading...</span>\n            </div>\n        )\n    }\n\n    if (!isLoading && movies.length === 0 && error) {\n        return (\n            <div className=\"movie-frame no-movies\">\n                <span>{error.toString()}</span>\n            </div>\n        )\n    }\n\n    if (!isLoading && movies.length === 0 && !error) {\n        return (\n            <div className=\"movie-frame no-movies\">\n                <span>Nothing to show</span>\n            </div>\n        )\n    }\n\n    if (movies.length <= num) {\n        return (\n            <div className=\"movie-frame no-movies\"> \n                <span>No more movies in your list</span>\n            </div> \n        )\n    }\n\n    return (\n        <MovieSelection\n            movie={ movies[num] }\n            accept={ accept }\n            reject={ reject }\n        />\n    )\n}\n\nexport default MovieWrapper","import './App.css'\nimport { MoviesContext } from './common'\nimport MovieWrapper from './components/MovieWrapper'\nimport { useMovies } from './common'\n\n(async function () {\n  if (process.env.NODE_ENV === 'development') {\n    const { worker } = require('./mocks/browser')\n    await worker.start({\n      serviceWorker: {\n        url: '/tinder-for-movies/mockServiceWorker.js',\n      },\n    })\n  }\n})()\n\nfunction App() {\n  const data = useMovies()\n\n  return (\n    <MoviesContext.Provider value={ data }>\n      <div className=\"app\">\n        <h1 className=\"app-title\">Tinder for Movies</h1>\n        <MovieWrapper />\n      </div>\n    </MoviesContext.Provider>\n  )\n}\n\nexport default App","import { useState, useEffect } from 'react'\nimport { Movie } from '../types'\n\nexport const useMovies = () => {\n    const [ isLoading, setIsLoading ] = useState<boolean>(true)\n    const [ movies, setMovies ] = useState<Movie[]>([])\n    const [ error, setError ] = useState<any>('')\n\n    useEffect(() => {\n        (async function() {\n            const url = process.env.REACT_APP_SERVER_URL\n            try {\n                const response = await fetch(`${url}/recommendations/`)\n                if (response.status !== 200) {\n                    console.log('Error', response.status, response.statusText)\n                    throw new Error(response.statusText) \n                }\n                const data: Movie[] = await response.json()\n                setMovies(data)\n            } catch (err: any) {\n                setError(err)\n            }\n            setIsLoading(false)\n        })()\n\n    }, [])\n\n    return { movies, isLoading, error }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { rest } from 'msw'\nimport movies from './db.json'\n\nconst selectedMovie = (req) => movies.recommendations.find(movie => movie.id === req.params.id)\n\nexport const handlers = [\n  rest.get('/recommendations', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(movies.recommendations))\n  }),\n  rest.put('/recommendations/:id/accept', (req, res, ctx) => res(ctx.status(200), ctx.json({\n    ...selectedMovie(req),\n    accepted: true\n  }))),\n  rest.put('/recommendations/:id/reject', (req, res, ctx) => res(ctx.status(200), ctx.json({\n    ...selectedMovie(req),\n    accepted: false\n  })))\n]","import { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n\nexport const worker = setupWorker(...handlers)\n"],"sourceRoot":""}